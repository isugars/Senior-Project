import org.apache.beam.runners.flink.examples.streaming.KafkaIOExamples;
import org.apache.beam.runners.flink.translation.wrappers.streaming.io.UnboundedFlinkSource;
import org.apache.beam.sdk.Pipeline;
import org.apache.beam.sdk.io.Read;
import org.apache.beam.sdk.options.PipelineOptionsFactory;
import org.apache.flink.streaming.connectors.kafka.FlinkKafkaConsumer09;
import org.apache.flink.streaming.util.serialization.SimpleStringSchema;

import java.util.Properties;

public class KafkaMessages{
    //establish topic, broker
    private static final String KAFKA_BROKER = "130.211.176.199:9092";
    private static final String KAFKA_TOPIC = "datastream";
    private static final String ZOOKEEPER = "130.211.176.199";

    public static void main(String[] args){
        //construct pipeline
        Pipeline pipeline = initializePipeline(args);
//        pipeline.apply(KafkaIO.read().withBootstrapServers(KAFKA_BROKER).withTopics(ImmutableList.of(KAFKA_TOPIC)));
        //set options
        KafkaIOExamples.KafkaOptions options = getOptions(pipeline);

        //set properties
        Properties properties = new Properties();
        properties.setProperty("bootstrap.server",KAFKA_BROKER);
        properties.setProperty("zookeeper.connect",ZOOKEEPER);
        //construct kafka consumer
        FlinkKafkaConsumer09<String> consumer = new FlinkKafkaConsumer09<String>(KAFKA_TOPIC,new SimpleStringSchema(),properties);
        //read from KafkaFlink
        pipeline.apply(Read.from(UnboundedFlinkSource.of(consumer)));
        //do something with the read messages
//        pipeline.apply(ParDo.of(new Something));
//        //run
        pipeline.run();
    }

    private static Pipeline initializePipeline(String[] args) {
        KafkaIOExamples.KafkaOptions options = PipelineOptionsFactory.fromArgs(args).as(KafkaIOExamples.KafkaOptions.class);
        options.setStreaming(true);
//        options.setRunner(FlinkPipelineRunner.class);
        return Pipeline.create(options);
    }

    private static KafkaIOExamples.KafkaOptions getOptions(Pipeline pipeline) {
        return pipeline.getOptions().as(KafkaIOExamples.KafkaOptions.class);
    }

    private static void doSomething(){
        //method that does something with the messages
        //take a message
        //parse to hex
        //read id
        //assign dec value
        //send value to client
    }
}
//Create Pipeline object

//read input string
//process by id
//write to pubSub message